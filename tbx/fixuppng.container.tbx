signature :proto❲Fixup PNG Wrapper❳ {
  inputs {:iport❲start❳ :iport❲png destination directory❳ :iport❲notify❳ :iport❲png fixed prefix❳}
  outputs {:oport❲done❳}
}

implementation :proto❲Fixup PNG Wrapper❳ container {
  child❲Fixup PNG Wrapper❳/ren {
    :child❲ls❳ :proto❲ls❳
    :child❲prefixFilename❳ :proto❲prefix filename❳
    :child❲fixupPNG❳ :proto❲fixup references to PNG files❳
    :child❲overwrite❳ :proto❲overwrite file❳
  }
  connections {
    { :self :iport❲start❳ ⤇ { {:child❲ls❳ :iport❲iterate❳} }}
    { :self :iport❲png destination directory❳ ⤇ { {:child❲ls❳ :iport❲directory❳} }}
    { :self :iport❲notify❳ ⤇ { {:self :oport❲done❳} }}
    { :self :iport❲png fixed prefix❳ ⤇ { {:child❲prefixFilename❳ :iport❲prefix❳} }}

    { :child❲ls❳ :oport❲filename❳ ⤇ {
                                     {:child❲overwrite❳ :iport❲prefix❳}
                                     {:child❲fixupPNG❳ :iport❲filename❳}
                                     {:child❲prefixFilename❳ :iport❲filename❳}
				    }
    }

    { :child❲prefixFilename❳ :oport❲new filename❳ ⤇ {{:child❲fixupPNG❳ :iport❲new filename❳}}}

    { {:child❲fixupPNG❳ :oport❲newfile❳} ⤇ {{:child❲overwrite❳ :iport❲overwrite filename❳}}}
  }






implementation :proto❲ls❳ leaf {
  :codeblock ❲c1❳ ⟪self.dirname - message.data⟫
  :codeblock ❲c2❳ ⟪
files = os.listdir (self.dirname)
for fname in files:
    name = self.dirname + '/' + fname
    if (os.path.isfile (name)):
        self.send (self, 'filename', name, message)
    else:
        pass
⟫
  on :iport❲iterate❳ ❲c1❳
  on :iport❲directory❳ ❲c2❳ 
}

implementation :proto❲prefix filename❳ leaf {
  :namedsync ❲c1❳ ⟪self.filename = message.data⟫
  :namedsync ❲c2❳ ⟪self.send (self, 'new filename', self.filename + message.data, message)⟫
  on :iport❲prefix❳ ❲c2❳
  on :iport❲filename❳ ❲c1❳
}

implementation :proto❲overwrite file❳ leaf {
  :namedsync ❲c1❳ ⟪self.original = message.data⟫
  :namedsync ❲c2❳ ⟪shutil.copy (message.data, self.original)⟫
  on :iport❲original filename❳ ❲c1❳
  on :iport❲overwrite filename❳ ❲c2❳
}

implementation :proto❲fixup references to PNG files❳ leaf {
  :namedsync ❲c1❳ ⟪self.filename = message.data⟫
  :namedsync ❲c2❳ 
⟪
result = self.fixup(self.filename)
send (self, 'new file', result, message)
⟫
  :namedsync ❲c3❳ 
⟪
def fixup (filename):
    f = open (filename, 'r')
    text = f.read ()
    subbed = re.sub (r'\[\[([^][]+\.png)\]\]', dosub, text)
    return subbed

def dosub (match):
    sub1 = match.group (1)
    sub2 = markua (sub1)
    sub = f'![resources/{sub2}]'
    return sub
⟫
  on :iport❲filename❳ ❲c1❳
  on :iport❲new filename❳ ❲c2❳
}

